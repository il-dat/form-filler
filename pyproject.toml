[project]
name = "form-filler"
description = "CrewAI-powered multi-agent system for processing documents and automatically filling DOCX forms"
readme = "README.md"
authors = [
    {name = "Dat Nguyen", email = "datnguyen.it09@gmail.com"},
]
license = {text = "MIT"}
requires-python = ">=3.10,<3.13"
dynamic = ["version"]
keywords = [
    "vietnamese",
    "document-processing",
    "crewai",
    "ollama",
    "ocr",
    "translation",
    "ai-agents",
    "multi-agent-system"
]
dependencies = [
    "click<9.0.0,>=8.0.0",
    "aiohttp<4.0.0,>=3.8.0",

    # CrewAI and AI dependencies
    "crewai<1.0.0,>=0.36.0",
    "crewai-tools<1.0.0,>=0.4.0",
    "langchain<1.0.0,>=0.1.0",
    "langchain-community<1.0.0,>=0.0.20",
    "langchain-ollama<1.0.0,>=0.1.0",

    # Document processing
    "PyMuPDF<2.0.0,>=1.23.0",
    "python-docx<1.0.0,>=0.8.11",
    "mammoth<2.0.0,>=1.5.0",
    "Pillow<10.0.0,>=9.0.0",
    "pytesseract<1.0.0,>=0.3.10",

    # Data handling
    "pydantic<3.0.0,>=2.0.0",
    "python-multipart<1.0.0,>=0.0.5",

    # Utilities
    "colorama<1.0.0,>=0.4.6",
    "tqdm<5.0.0,>=4.64.0",
    "rich<14.0.0,>=13.0.0",
    "loguru<1.0.0,>=0.7.0",

    # CrewAI extensions
    "chromadb<1.0.0,>=0.4.15",
    "sentence-transformers<3.0.0,>=2.2.2",
]

[project.urls]
Homepage = "https://github.com/il-dat/form-filler"
Repository = "https://github.com/il-dat/form-filler.git"
Issues = "https://github.com/il-dat/form-filler/issues"
Changelog = "https://github.com/il-dat/form-filler/releases"

[project.scripts]
form-filler = "form_filler.cli:main"
form-filler-batch = "form_filler.batch:main"

[project.optional-dependencies]
dev = [
    "pytest<8.0.0,>=7.0.0",
    "pytest-asyncio<1.0.0,>=0.21.0",
    "pytest-cov<5.0.0,>=4.0.0",
    "pytest-beartype<1.0.0,>=0.0.2",
    "pre-commit<5.0.0,>=4.2.0",
    "beartype<1.0.0,>=0.18.5",
    "ruff>=0.3.0,<1.0.0",
    "poethepoet<1.0.0,>=0.25.0",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.build]
includes = ["src/form_filler"]

[tool.pdm.version]
source = "scm"

[tool.pytest.ini_options]
pythonpath = [
  ".", "src",
]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/form_filler"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "demo.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[tool.ruff]
line-length = 99
target-version = "py310"
# Enable the formatter
include = ["*.py", "*.pyi"]
extend-exclude = ["__pycache__", "*.pyc", ".git"]

[tool.ruff.format]
# Use single quotes for strings
quote-style = "double"
# Indent with 4 spaces
indent-style = "space"
# Keep line endings consistent
line-ending = "auto"
# Skip lines that are too long
skip-magic-trailing-comma = false

[tool.ruff.lint]
# E: pycodestyle errors
# F: pyflakes
# I: isort
# N: pep8-naming
# D: pydocstyle
# UP: pyupgrade
# B: flake8-bugbear
# S: flake8-bandit (security)
# C4: flake8-comprehensions
# SIM: flake8-simplify
# TCH: flake8-type-checking
# Q: flake8-quotes
# COM: flake8-commas
# PTH: flake8-use-pathlib
# RUF: Ruff-specific rules
select = ["E", "F", "I", "N", "D", "UP", "B", "S", "C4", "SIM", "TCH", "Q", "COM", "PTH", "RUF"]
ignore = [
    "E501",  # Line too long (handled by ruff formatter)
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # One blank line required before class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "D213",  # Multi-line docstring summary should start at the second line
    "COM812",  # Missing trailing comma in imports
]
typing-modules = ["beartype.typing"]

[tool.ruff.lint.isort]
known-first-party = ["form_filler"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D103"]  # Allow assert and missing docstrings in tests
"**/__init__.py" = ["F401"]   # Allow unused imports in __init__.py

[tool.bandit]
targets = ["src/"]
exclude = ["tests/", "scripts/", "src/form_filler/utils/"]
skips = ["B101", "B404", "B603"]

[tool.gitleaks]
title = "Form-Filler Gitleaks Configuration"

# This is in addition to the default ruleset provided by gitleaks

[[tool.gitleaks.rules]]
description = "Generic API Key"
regex = '''(?i)(['"]?)?([a-zA-Z0-9_-]+)_?(key|api|token|secret|passwd|password|auth)(['"]?)?[[:blank:]]*[:=>][[:blank:]]*(['"])?[a-zA-Z0-9_=+\/.]{16,45}(['"])?'''
tags = ["key", "API", "generic"]

[[tool.gitleaks.rules.allowlist]]
regexes = ['''example|test|fake|sample''']

[[tool.gitleaks.rules]]
description = "Generic Secret"
regex = '''(?i)['"]?[a-zA-Z0-9_-]*(secret|token|key|passwd|password|credential)s?['"]?[[:blank:]]*[:=>][[:blank:]]*['"][a-zA-Z0-9_=+\/.\-]{8,64}['"]'''
tags = ["key", "secret", "generic"]

[[tool.gitleaks.rules.allowlist]]
regexes = ['''example|test|fake|sample''']

[[tool.gitleaks.rules]]
description = "Database Connection String"
regex = '''(?i)(mongodb|postgresql|mysql|jdbc|redis|ldap):\/\/[^\s:]+:[^\s@]+@[^\s:]+:[0-9]+'''
tags = ["database", "connection"]

[[tool.gitleaks.rules]]
description = "Crypto Seed/Salt"
regex = '''(?i)['"]?seed['"]?[[:blank:]]*[:=>][[:blank:]]*['"][a-f0-9]{64}['"]'''
tags = ["crypto", "seed"]

[[tool.gitleaks.rules]]
description = "Environment Variable Assignment With Secret"
regex = '''(?i)(export|set)[[:blank:]]+[a-zA-Z0-9_]*(key|api|token|secret|passwd|password|auth)[a-zA-Z0-9_]*[[:blank:]]*=[[:blank:]]*['"].{8,64}['"]'''
tags = ["env", "secret"]

# Allow lists to prevent false positives
[tool.gitleaks.allowlist]
description = "Allow list to exclude common patterns"
paths = [
    '''(.*?)(test|example|sample|mock)(.*?)\.py''',
    '''.*pytest_cache.*''',
    '''.*\.git.*'''
]

[tool.poe.tasks]
test = "pytest tests/"
test-cov = "pytest --cov=src tests/"
run-demo = "python src/demo.py"
ruff-check = "ruff check src tests"
ruff-fix = "ruff check --fix src tests"
ruff-format = "ruff format ."

[tool.poe.tasks.full-lint]
sequence = [
    { cmd = "ruff check src tests" },
    { cmd = "ruff format --check ." }
]
help = "Run full linting suite without modifying files"

[tool.poe.tasks.fix-all]
sequence = [
    { cmd = "ruff check --fix src tests" },
    { cmd = "ruff format ." }
]
help = "Apply all automatic fixes with ruff"

[tool.poe.tasks.install]
sequence = [
    { cmd = "uv pip install -e \".\"" }
]
help = "Install the package in development mode"


[tool.poe.tasks.install-dev]
sequence = [
    { cmd = "uv pip install -e \".[dev]\"" }
]
help = "Install the package with development dependencies"

[tool.poe.tasks.install-hooks]
sequence = [
    { cmd = "./scripts/install_hooks.sh" }
]
help = "Install pre-commit hooks in the current virtualenv"

[tool.poe.tasks.setup-secrets-detection]
sequence = [
    { cmd = "./scripts/setup_gitleaks_config.sh" }
]
help = "Set up custom gitleaks configuration for enhanced secrets detection"

[tool.poe.tasks.force-setup-secrets-detection]
sequence = [
    { cmd = "./scripts/setup_gitleaks_config.sh --force" }
]
help = "Set up custom gitleaks configuration, overwriting any existing config"

[tool.poe.tasks.install-all]
sequence = [
    { cmd = "uv pip install -e \".[dev]\"" }
]
help = "Install the package with all dependencies"

[tool.poe.tasks.clean]
sequence = [
    { cmd = "rm -rf build/ dist/ *.egg-info/ .pytest_cache/ .coverage htmlcov/ .mypy_cache/" },
    { cmd = "find . -type d -name __pycache__ -exec rm -rf {} +; true" }
]
help = "Clean build artifacts and caches"

[tool.poe.tasks.version]
cmd = "python -c \"import form_filler; print(f'Form-filler version: {form_filler.__version__}')\""
help = "Show the current package version"
